{"future_incompat_report":[{"diagnostic":{"message":"using `procedural-masquerade` crate","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":7265,"byte_end":7294,"line_start":94,"line_end":94,"column_start":8,"column_end":37,"is_primary":true,"text":[{"text":"\t\tenum ProceduralMasqueradeDummyType {","highlight_start":8,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":7837,"byte_end":7862,"line_start":117,"line_end":117,"column_start":2,"column_end":27,"is_primary":false,"text":[{"text":"\tdefine_rental_traits!(32);","highlight_start":2,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"define_rental_traits!","def_site_span":{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":7150,"byte_end":7183,"line_start":90,"line_end":90,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"macro_rules! define_rental_traits {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[allow(proc_macro_back_compat)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: using `procedural-masquerade` crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs:94:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        enum ProceduralMasqueradeDummyType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    define_rental_traits!(32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(proc_macro_back_compat)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `define_rental_traits` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using `procedural-masquerade` crate","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":17587,"byte_end":17616,"line_start":258,"line_end":258,"column_start":9,"column_end":38,"is_primary":true,"text":[{"text":"\t\t\tenum ProceduralMasqueradeDummyType {","highlight_start":9,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":18063,"byte_end":21449,"line_start":285,"line_end":346,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"rental! {","highlight_start":1,"highlight_end":10},{"text":"\t/// Example types that demonstrate the API generated by the rental macro.","highlight_start":1,"highlight_end":75},{"text":"\tpub mod examples {","highlight_start":1,"highlight_end":20},{"text":"\t\tuse std::sync;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// The simplest shared rental. The head is a boxed integer, and the suffix is a ref to that integer. This struct demonstrates the basic API that all shared rental structs have. See [`SimpleMut`](struct.SimpleMut.html) for the mutable analog.","highlight_start":1,"highlight_end":245},{"text":"\t\t#[rental]","highlight_start":1,"highlight_end":12},{"text":"\t\tpub struct SimpleRef {","highlight_start":1,"highlight_end":25},{"text":"\t\t\thead: Box<i32>,","highlight_start":1,"highlight_end":19},{"text":"\t\t\tiref: &'head i32,","highlight_start":1,"highlight_end":21},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// The simplest mutable rental. Mutable rentals have a slightly different API; compare this struct to [`SimpleRef`](struct.SimpleRef.html) for the clearest picture of how they differ.","highlight_start":1,"highlight_end":187},{"text":"\t\t#[rental_mut]","highlight_start":1,"highlight_end":16},{"text":"\t\tpub struct SimpleMut {","highlight_start":1,"highlight_end":25},{"text":"\t\t\thead: Box<i32>,","highlight_start":1,"highlight_end":19},{"text":"\t\t\tiref: &'head mut i32,","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Identical to [`SimpleRef`](struct.SimpleRef.html), but with the `debug` flag enabled. This will provide a `Debug` impl for the struct as long as all of the fields are `Debug`.","highlight_start":1,"highlight_end":182},{"text":"\t\t#[rental(debug)]","highlight_start":1,"highlight_end":19},{"text":"\t\tpub struct SimpleRefDebug {","highlight_start":1,"highlight_end":30},{"text":"\t\t\thead: Box<i32>,","highlight_start":1,"highlight_end":19},{"text":"\t\t\tiref: &'head i32,","highlight_start":1,"highlight_end":21},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Similar to [`SimpleRef`](struct.SimpleRef.html), but with the `clone` flag enabled. This will provide a `Clone` impl for the struct as long as the prefix fields are `CloneStableDeref` and the suffix is `Clone` . Notice that the head is an `Arc`, since a clone of an `Arc` will deref to the same object as the original.","highlight_start":1,"highlight_end":325},{"text":"\t\t#[rental(clone)]","highlight_start":1,"highlight_end":19},{"text":"\t\tpub struct SimpleRefClone {","highlight_start":1,"highlight_end":30},{"text":"\t\t\thead: sync::Arc<i32>,","highlight_start":1,"highlight_end":25},{"text":"\t\t\tiref: &'head i32,","highlight_start":1,"highlight_end":21},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Identical to [`SimpleRef`](struct.SimpleRef.html), but with the `deref_suffix` flag enabled. This will provide a `Deref` impl for the struct, which will in turn deref the suffix. Notice that this flag also removes the `self` param from all methods, replacing it with an explicit param. This prevents any rental methods from blocking deref.","highlight_start":1,"highlight_end":346},{"text":"\t\t#[rental(deref_suffix)]","highlight_start":1,"highlight_end":26},{"text":"\t\tpub struct SimpleRefDeref {","highlight_start":1,"highlight_end":30},{"text":"\t\t\thead: Box<i32>,","highlight_start":1,"highlight_end":19},{"text":"\t\t\tiref: &'head i32,","highlight_start":1,"highlight_end":21},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Identical to [`SimpleMut`](struct.SimpleMut.html), but with the `deref_mut_suffix` flag enabled. This will provide a `DerefMut` impl for the struct, which will in turn deref the suffix.Notice that this flag also removes the `self` param from all methods, replacing it with an explicit param. This prevents any rental methods from blocking deref.","highlight_start":1,"highlight_end":352},{"text":"\t\t#[rental_mut(deref_mut_suffix)]","highlight_start":1,"highlight_end":34},{"text":"\t\tpub struct SimpleMutDeref {","highlight_start":1,"highlight_end":30},{"text":"\t\t\thead: Box<i32>,","highlight_start":1,"highlight_end":19},{"text":"\t\t\tiref: &'head mut i32,","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Identical to [`SimpleRef`](struct.SimpleRef.html), but with the `covariant` flag enabled. For rental structs where the field types have covariant lifetimes, this will allow you to directly borrow the fields, as they can be safely reborrowed to a shorter lifetime. See the [`all`](struct.SimpleRefCovariant.html#method.all) and [`suffix`](struct.SimpleRefCovariant.html#method.suffix) methods.","highlight_start":1,"highlight_end":399},{"text":"\t\t#[rental(covariant)]","highlight_start":1,"highlight_end":23},{"text":"\t\tpub struct SimpleRefCovariant {","highlight_start":1,"highlight_end":34},{"text":"\t\t\thead: Box<i32>,","highlight_start":1,"highlight_end":19},{"text":"\t\t\tiref: &'head i32,","highlight_start":1,"highlight_end":21},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Identical to [`SimpleRef`](struct.SimpleRef.html), but with the `map_suffix` flag enabled. This will allow the type of the suffix to be changed by mapping it to another instantiation of the same struct with the different type param. See the [`map`](struct.SimpleRefMap.html#method.map), [`try_map`](struct.SimpleRefMap.html#method.try_map), and [`try_map_or_drop`](struct.SimpleRefMap.html#method.try_map_or_drop) methods.","highlight_start":1,"highlight_end":429},{"text":"\t\t#[rental(map_suffix = \"T\")]","highlight_start":1,"highlight_end":30},{"text":"\t\tpub struct SimpleRefMap<T: 'static> {","highlight_start":1,"highlight_end":40},{"text":"\t\t\thead: Box<i32>,","highlight_start":1,"highlight_end":19},{"text":"\t\t\tiref: &'head T,","highlight_start":1,"highlight_end":19},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"rental!","def_site_span":{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":16984,"byte_end":17003,"line_start":226,"line_end":226,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! rental {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[allow(proc_macro_back_compat)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: using `procedural-masquerade` crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs:258:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            enum ProceduralMasqueradeDummyType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mrental! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Example types that demonstrate the API generated by the rental macro.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod examples {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use std::sync;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(proc_macro_back_compat)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `rental` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using `procedural-masquerade` crate","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":17587,"byte_end":17616,"line_start":258,"line_end":258,"column_start":9,"column_end":38,"is_primary":true,"text":[{"text":"\t\t\tenum ProceduralMasqueradeDummyType {","highlight_start":9,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":21476,"byte_end":25480,"line_start":350,"line_end":485,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"rental! {","highlight_start":1,"highlight_end":10},{"text":"\t/// Premade types for the most common use cases.","highlight_start":1,"highlight_end":50},{"text":"\tpub mod common {","highlight_start":1,"highlight_end":18},{"text":"\t\tuse std::ops::DerefMut;","highlight_start":1,"highlight_end":26},{"text":"\t\tuse stable_deref_trait::StableDeref;","highlight_start":1,"highlight_end":39},{"text":"\t\tuse std::cell;","highlight_start":1,"highlight_end":17},{"text":"\t\tuse std::sync;","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Stores an owner and a shared reference in the same struct.","highlight_start":1,"highlight_end":65},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// ```rust","highlight_start":1,"highlight_end":14},{"text":"\t\t/// # extern crate rental;","highlight_start":1,"highlight_end":29},{"text":"\t\t/// # use rental::common::RentRef;","highlight_start":1,"highlight_end":37},{"text":"\t\t/// # fn main() {","highlight_start":1,"highlight_end":20},{"text":"\t\t/// let r = RentRef::new(Box::new(5), |i| &*i);","highlight_start":1,"highlight_end":50},{"text":"\t\t/// assert_eq!(*r, RentRef::rent(&r, |iref| **iref));","highlight_start":1,"highlight_end":56},{"text":"\t\t/// # }","highlight_start":1,"highlight_end":10},{"text":"\t\t/// ```","highlight_start":1,"highlight_end":10},{"text":"\t\t#[rental(debug, clone, deref_suffix, covariant, map_suffix = \"T\")]","highlight_start":1,"highlight_end":69},{"text":"\t\tpub struct RentRef<H: 'static + StableDeref, T: 'static> {","highlight_start":1,"highlight_end":61},{"text":"\t\t\thead: H,","highlight_start":1,"highlight_end":12},{"text":"\t\t\tsuffix: &'head T,","highlight_start":1,"highlight_end":21},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Stores an owner and a mutable reference in the same struct.","highlight_start":1,"highlight_end":66},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// ```rust","highlight_start":1,"highlight_end":14},{"text":"\t\t/// # extern crate rental;","highlight_start":1,"highlight_end":29},{"text":"\t\t/// # use rental::common::RentMut;","highlight_start":1,"highlight_end":37},{"text":"\t\t/// # fn main() {","highlight_start":1,"highlight_end":20},{"text":"\t\t/// let mut r = RentMut::new(Box::new(5), |i| &mut *i);","highlight_start":1,"highlight_end":58},{"text":"\t\t/// *r = 12;","highlight_start":1,"highlight_end":15},{"text":"\t\t/// assert_eq!(12, RentMut::rent(&mut r, |iref| **iref));","highlight_start":1,"highlight_end":60},{"text":"\t\t/// # }","highlight_start":1,"highlight_end":10},{"text":"\t\t/// ```","highlight_start":1,"highlight_end":10},{"text":"\t\t#[rental_mut(debug, deref_mut_suffix, covariant, map_suffix = \"T\")]","highlight_start":1,"highlight_end":70},{"text":"\t\tpub struct RentMut<H: 'static + StableDeref + DerefMut, T: 'static> {","highlight_start":1,"highlight_end":72},{"text":"\t\t\thead: H,","highlight_start":1,"highlight_end":12},{"text":"\t\t\tsuffix: &'head mut T,","highlight_start":1,"highlight_end":25},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Stores a `RefCell` and a `Ref` in the same struct.","highlight_start":1,"highlight_end":57},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// ```rust","highlight_start":1,"highlight_end":14},{"text":"\t\t/// # extern crate rental;","highlight_start":1,"highlight_end":29},{"text":"\t\t/// # use rental::common::RentRefCell;","highlight_start":1,"highlight_end":41},{"text":"\t\t/// # fn main() {","highlight_start":1,"highlight_end":20},{"text":"\t\t/// use std::cell;","highlight_start":1,"highlight_end":21},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// let r = RentRefCell::new(Box::new(cell::RefCell::new(5)), |c| c.borrow());","highlight_start":1,"highlight_end":81},{"text":"\t\t/// assert_eq!(*r, RentRefCell::rent(&r, |c| **c));","highlight_start":1,"highlight_end":54},{"text":"\t\t/// # }","highlight_start":1,"highlight_end":10},{"text":"\t\t/// ```","highlight_start":1,"highlight_end":10},{"text":"\t\t#[rental(debug, clone, deref_suffix, covariant, map_suffix = \"T\")]","highlight_start":1,"highlight_end":69},{"text":"\t\tpub struct RentRefCell<H: 'static + StableDeref, T: 'static> {","highlight_start":1,"highlight_end":65},{"text":"\t\t\thead: H,","highlight_start":1,"highlight_end":12},{"text":"\t\t\tsuffix: cell::Ref<'head, T>,","highlight_start":1,"highlight_end":32},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Stores a `RefCell` and a `RefMut` in the same struct.","highlight_start":1,"highlight_end":60},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// ```rust","highlight_start":1,"highlight_end":14},{"text":"\t\t/// # extern crate rental;","highlight_start":1,"highlight_end":29},{"text":"\t\t/// # use rental::common::RentRefCellMut;","highlight_start":1,"highlight_end":44},{"text":"\t\t/// # fn main() {","highlight_start":1,"highlight_end":20},{"text":"\t\t/// use std::cell;","highlight_start":1,"highlight_end":21},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// let mut r = RentRefCellMut::new(Box::new(cell::RefCell::new(5)), |c| c.borrow_mut());","highlight_start":1,"highlight_end":92},{"text":"\t\t/// *r = 12;","highlight_start":1,"highlight_end":15},{"text":"\t\t/// assert_eq!(12, RentRefCellMut::rent(&r, |c| **c));","highlight_start":1,"highlight_end":57},{"text":"\t\t/// # }","highlight_start":1,"highlight_end":10},{"text":"\t\t/// ```","highlight_start":1,"highlight_end":10},{"text":"\t\t#[rental_mut(debug, deref_mut_suffix, covariant, map_suffix = \"T\")]","highlight_start":1,"highlight_end":70},{"text":"\t\tpub struct RentRefCellMut<H: 'static + StableDeref + DerefMut, T: 'static> {","highlight_start":1,"highlight_end":79},{"text":"\t\t\thead: H,","highlight_start":1,"highlight_end":12},{"text":"\t\t\tsuffix: cell::RefMut<'head, T>,","highlight_start":1,"highlight_end":35},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Stores a `Mutex` and a `MutexGuard` in the same struct.","highlight_start":1,"highlight_end":62},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// ```rust","highlight_start":1,"highlight_end":14},{"text":"\t\t/// # extern crate rental;","highlight_start":1,"highlight_end":29},{"text":"\t\t/// # use rental::common::RentMutex;","highlight_start":1,"highlight_end":39},{"text":"\t\t/// # fn main() {","highlight_start":1,"highlight_end":20},{"text":"\t\t/// use std::sync;","highlight_start":1,"highlight_end":21},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// let mut r = RentMutex::new(Box::new(sync::Mutex::new(5)), |c| c.lock().unwrap());","highlight_start":1,"highlight_end":88},{"text":"\t\t/// *r = 12;","highlight_start":1,"highlight_end":15},{"text":"\t\t/// assert_eq!(12, RentMutex::rent(&r, |c| **c));","highlight_start":1,"highlight_end":52},{"text":"\t\t/// # }","highlight_start":1,"highlight_end":10},{"text":"\t\t/// ```","highlight_start":1,"highlight_end":10},{"text":"\t\t#[rental(debug, clone, deref_mut_suffix, covariant, map_suffix = \"T\")]","highlight_start":1,"highlight_end":73},{"text":"\t\tpub struct RentMutex<H: 'static + StableDeref + DerefMut, T: 'static> {","highlight_start":1,"highlight_end":74},{"text":"\t\t\thead: H,","highlight_start":1,"highlight_end":12},{"text":"\t\t\tsuffix: sync::MutexGuard<'head, T>,","highlight_start":1,"highlight_end":39},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Stores an `RwLock` and an `RwLockReadGuard` in the same struct.","highlight_start":1,"highlight_end":70},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// ```rust","highlight_start":1,"highlight_end":14},{"text":"\t\t/// # extern crate rental;","highlight_start":1,"highlight_end":29},{"text":"\t\t/// # use rental::common::RentRwLock;","highlight_start":1,"highlight_end":40},{"text":"\t\t/// # fn main() {","highlight_start":1,"highlight_end":20},{"text":"\t\t/// use std::sync;","highlight_start":1,"highlight_end":21},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// let r = RentRwLock::new(Box::new(sync::RwLock::new(5)), |c| c.read().unwrap());","highlight_start":1,"highlight_end":86},{"text":"\t\t/// assert_eq!(*r, RentRwLock::rent(&r, |c| **c));","highlight_start":1,"highlight_end":53},{"text":"\t\t/// # }","highlight_start":1,"highlight_end":10},{"text":"\t\t/// ```","highlight_start":1,"highlight_end":10},{"text":"\t\t#[rental(debug, clone, deref_suffix, covariant, map_suffix = \"T\")]","highlight_start":1,"highlight_end":69},{"text":"\t\tpub struct RentRwLock<H: 'static + StableDeref, T: 'static> {","highlight_start":1,"highlight_end":64},{"text":"\t\t\thead: H,","highlight_start":1,"highlight_end":12},{"text":"\t\t\tsuffix: sync::RwLockReadGuard<'head, T>,","highlight_start":1,"highlight_end":44},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t/// Stores an `RwLock` and an `RwLockWriteGuard` in the same struct.","highlight_start":1,"highlight_end":71},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// ```rust","highlight_start":1,"highlight_end":14},{"text":"\t\t/// # extern crate rental;","highlight_start":1,"highlight_end":29},{"text":"\t\t/// # use rental::common::RentRwLockMut;","highlight_start":1,"highlight_end":43},{"text":"\t\t/// # fn main() {","highlight_start":1,"highlight_end":20},{"text":"\t\t/// use std::sync;","highlight_start":1,"highlight_end":21},{"text":"\t\t///","highlight_start":1,"highlight_end":6},{"text":"\t\t/// let mut r = RentRwLockMut::new(Box::new(sync::RwLock::new(5)), |c| c.write().unwrap());","highlight_start":1,"highlight_end":94},{"text":"\t\t/// *r = 12;","highlight_start":1,"highlight_end":15},{"text":"\t\t/// assert_eq!(12, RentRwLockMut::rent(&r, |c| **c));","highlight_start":1,"highlight_end":56},{"text":"\t\t/// # }","highlight_start":1,"highlight_end":10},{"text":"\t\t/// ```","highlight_start":1,"highlight_end":10},{"text":"\t\t#[rental(debug, clone, deref_mut_suffix, covariant, map_suffix = \"T\")]","highlight_start":1,"highlight_end":73},{"text":"\t\tpub struct RentRwLockMut<H: 'static + StableDeref, T: 'static> {","highlight_start":1,"highlight_end":67},{"text":"\t\t\thead: H,","highlight_start":1,"highlight_end":12},{"text":"\t\t\tsuffix: sync::RwLockWriteGuard<'head, T>,","highlight_start":1,"highlight_end":45},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"rental!","def_site_span":{"file_name":"C:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs","byte_start":16984,"byte_end":17003,"line_start":226,"line_end":226,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! rental {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[allow(proc_macro_back_compat)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: using `procedural-masquerade` crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Mel\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rental-0.5.6\\src\\lib.rs:258:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            enum ProceduralMasqueradeDummyType {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mrental! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Premade types for the most common use cases.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m352\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod common {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use std::ops::DerefMut;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[allow(proc_macro_back_compat)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: The `procedural-masquerade` crate has been unnecessary since Rust 1.30.0. Versions of this crate below 0.1.7 will eventually stop compiling.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this warning originates in the macro `rental` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
